#this module should work just like hadd
from ROOT import *
import glob, sys
import numpy as np
from shared_utils import *
import os as os_

istest = False
try: folder = sys.argv[1]
except:
    print 'please give folder name as first argument'
    exit(0)

outdir = folder.replace('smallchunks','mediumchunks')

if not os_.path.exists(outdir):
    os_.system("mkdir -p %s"%outdir)
    
MC = []
#MC.append('Summer16.DYJetsToLL_M-50_TuneCUETP8M1')
#MC.append('Summer16.DYJetsToLL_M-50_HT-100to200')
#MC.append('Summer16.DYJetsToLL_M-50_HT-200to400')
#MC.append('Summer16.DYJetsToLL_M-50_HT-400to600')
#MC.append('Summer16.DYJetsToLL_M-50_HT-600to800')
#MC.append('Summer16.DYJetsToLL_M-50_HT-800to1200')
#MC.append('Summer16.DYJetsToLL_M-50_HT-1200to2500')
#MC.append('Summer16.DYJetsToLL_M-50_HT-2500toInf')
#MC.append('Summer16.QCD_HT200to300')
#MC.append('Summer16.QCD_HT300to500')
#MC.append('Summer16.QCD_HT500to700')
#MC.append('Summer16.QCD_HT700to1000')
#MC.append('Summer16.QCD_HT1000to1500')
#MC.append('Summer16.QCD_HT1500to2000')
#MC.append('Summer16.QCD_HT2000toInf')
#MC.append('Summer16.TTJets')
#MC.append('Summer16.WJetsToLNu_TuneCUETP8M1')
#MC.append('Summer16.WJetsToLNu_HT-100To200')
#MC.append('Summer16.WJetsToLNu_HT-200To400')
#MC.append('Summer16.WJetsToLNu_HT-400To600')
#MC.append('Summer16.WJetsToLNu_HT-600To800')
#MC.append('Summer16.WJetsToLNu_HT-800To1200')
#MC.append('Summer16.WJetsToLNu_HT-1200To2500')
#MC.append('Summer16.WJetsToLNu_HT-2500ToInf')
#MC.append('Summer16.ZJetsToNuNu_HT-100To200')
#MC.append('Summer16.ZJetsToNuNu_HT-200To400')
#MC.append('Summer16.ZJetsToNuNu_HT-400To600')
#MC.append('Summer16.ZJetsToNuNu_HT-600To800')
#MC.append('Summer16.ZJetsToNuNu_HT-800To1200')
#MC.append('Summer16.ZJetsToNuNu_HT-1200To2500')
#MC.append('Summer16.ZJetsToNuNu_HT-2500ToInf')
#MC.append('Summer16.WW')
#MC.append('Summer16.WZ')
#MC.append('Summer16.ZZ')
#MC.append('SMS-T2bt-LLChipm_ctau-200_mLSP-1')
#MC.append('SMS-T2bt-LLChipm_ctau-200_mLSP-50')
#MC.append('SMS-T2bt-LLChipm_ctau-200_mLSP-150')
#MC.append('SMS-T2bt-LLChipm_ctau-200_mLSP-200')
#MC.append('SMS-T2bt-LLChipm_ctau-200_mLSP-400')
#MC.append('SMS-T2bt-LLChipm_ctau-200_mLSP-600')
#MC.append('SMS-T2bt-LLChipm_ctau-200_mLSP-800')
#MC.append('SMS-T2bt-LLChipm_ctau-200_mLSP-900')
#MC.append('SMS-T2bt-LLChipm_ctau-200_mLSP-1000')
#MC.append('SMS-T2bt-LLChipm_ctau-200_mLSP-1100')
#MC.append('SMS-T2bt-LLChipm_ctau-200_mLSP-1200')
#MC.append('SMS-T2bt-LLChipm_ctau-200_mLSP-1300')
#MC.append('SMS-T2bt-LLChipm_ctau-200_mLSP-1400')
#MC.append('SMS-T2bt-LLChipm_ctau-200_mLSP-1500')
#MC.append('SMS-T2bt-LLChipm_ctau-200_mLSP-1600')
#MC.append('SMS-T2bt-LLChipm_ctau-200_mLSP-1700')
#MC.append('SMS-T2bt-LLChipm_ctau-200_mLSP-1800')
#MC.append('SMS-T2bt-LLChipm_ctau-200_mLSP-2000')

#MC.append('RunIIFall17MiniAODv2.DYJetsToLL_M-50_TuneCP5')
#MC.append('RunIIFall17MiniAODv2.DYJetsToLL_M-50_HT-100to200')
#MC.append('RunIIFall17MiniAODv2.DYJetsToLL_M-50_HT-200to400')
#MC.append('RunIIFall17MiniAODv2.DYJetsToLL_M-50_HT-400to600')
#MC.append('RunIIFall17MiniAODv2.DYJetsToLL_M-50_HT-600to800')
#MC.append('RunIIFall17MiniAODv2.DYJetsToLL_M-50_HT-800to1200')
#MC.append('RunIIFall17MiniAODv2.DYJetsToLL_M-50_HT-1200to2500')
#MC.append('RunIIFall17MiniAODv2.DYJetsToLL_M-50_HT-2500toInf')
#MC.append('RunIIFall17MiniAODv2.QCD_HT200to300')
#MC.append('RunIIFall17MiniAODv2.QCD_HT300to500')
#MC.append('RunIIFall17MiniAODv2.QCD_HT500to700')
#MC.append('RunIIFall17MiniAODv2.QCD_HT700to1000')
#MC.append('RunIIFall17MiniAODv2.QCD_HT1000to1500')
#MC.append('RunIIFall17MiniAODv2.QCD_HT1500to2000')
#MC.append('RunIIFall17MiniAODv2.QCD_HT2000toInf')
#MC.append('RunIIFall17MiniAODv2.TTJets_TuneCP5')
#MC.append('RunIIFall17MiniAODv2.TTJets_HT-600to800')
#MC.append('RunIIFall17MiniAODv2.TTJets_HT-800to1200')
#MC.append('RunIIFall17MiniAODv2.TTJets_HT-1200to2500')
#MC.append('RunIIFall17MiniAODv2.TTJets_HT-2500toInf')
#MC.append('RunIIFall17MiniAODv2.WJetsToLNu_HT-100To200')
#MC.append('RunIIFall17MiniAODv2.WJetsToLNu_HT-200To400')
#MC.append('RunIIFall17MiniAODv2.WJetsToLNu_HT-400To600')
#MC.append('RunIIFall17MiniAODv2.WJetsToLNu_HT-600To800')
#MC.append('RunIIFall17MiniAODv2.WJetsToLNu_HT-800To1200')
#MC.append('RunIIFall17MiniAODv2.WJetsToLNu_HT-1200To2500')
#MC.append('RunIIFall17MiniAODv2.WJetsToLNu_HT-2500ToInf')
#MC.append('RunIIFall17MiniAODv2.ZJetsToNuNu_HT-100To200')
#MC.append('RunIIFall17MiniAODv2.ZJetsToNuNu_HT-200To400')
#MC.append('RunIIFall17MiniAODv2.ZJetsToNuNu_HT-400To600')
#MC.append('RunIIFall17MiniAODv2.ZJetsToNuNu_HT-600To800')
#MC.append('RunIIFall17MiniAODv2.ZJetsToNuNu_HT-800To1200')
#MC.append('RunIIFall17MiniAODv2.ZJetsToNuNu_HT-1200To2500')
#MC.append('RunIIFall17MiniAODv2.ZJetsToNuNu_HT-2500ToInf')
#MC.append('RunIIFall17MiniAODv2.WWTo1L1Nu2Q')
#MC.append('RunIIFall17MiniAODv2.WZTo1L1Nu2Q')
#MC.append('RunIIFall17MiniAODv2.WZTo1L3Nu')
#MC.append('RunIIFall17MiniAODv2.ZZTo2L2Q')
#MC.append('RunIIFall17MiniAODv2.WZZ_TuneCP5')

Data=[]
Data.append('Run2016B-SingleMuon')
Data.append('Run2016C-SingleMuon')
Data.append('Run2016D-SingleMuon')
Data.append('Run2016E-SingleMuon')
Data.append('Run2016F-SingleMuon')
Data.append('Run2016G-SingleMuon')
Data.append('Run2016H-SingleMuon')
Data.append('Run2016B-SingleElectron')
Data.append('Run2016C-SingleElectron')
Data.append('Run2016D-SingleElectron')
Data.append('Run2016E-SingleElectron')
Data.append('Run2016F-SingleElectron')
Data.append('Run2016G-SingleElectron')
Data.append('Run2016H-SingleElectron')
#Data.append('Run2016B-MET')
#Data.append('Run2016C-MET')
#Data.append('Run2016D-MET')
#Data.append('Run2016E-MET')
#Data.append('Run2016F-MET')
#Data.append('Run2016G-MET')
#Data.append('Run2016H-MET')
#Data.append('Run2017B-SingleMuon')
#Data.append('Run2017C-SingleMuon')
#Data.append('Run2017D-SingleMuon')
#Data.append('Run2017E-SingleMuon')
#Data.append('Run2017F-SingleMuon')
#Data.append('Run2017B-SingleElectron')
#Data.append('Run2017C-SingleElectron')
#Data.append('Run2017D-SingleElectron')
#Data.append('Run2017E-SingleElectron')
#Data.append('Run2017F-SingleElectron')

for keyword in MC:
    command = 'python ahadd.py -f %s/unwghtd'%outdir+keyword+'.root '+folder+'/*'+keyword+'*.root'
    print 'command', command
    if not istest: os_.system(command)    
    fuw = TFile(outdir+'/unwghtd'+keyword+'.root')
    fw = TFile(outdir+'/'+keyword+'.root', 'recreate')
    hHt = fuw.Get('hHT_unweighted')
    nentries = hHt.GetEntries()
    keys = fuw.GetListOfKeys()
    for key in keys:
    	name = key.GetName()
    	if not len(name.split('/'))>0: continue
    	hist = fuw.Get(name)
    	hist.Scale(1.0/nentries)
    	fw.cd()
    	hist.Write()
    fuw.Close()
    command = 'rm %s/unwghtd'%outdir+keyword+'.root'
    print command
    if not istest: os_.system(command)
    fw.Close()

for keyword in Data:
    command = 'python ahadd.py -f %s/'%outdir+keyword+'.root '+folder+'/*'+keyword+'*.root'
    print 'command', command
    if not istest: os_.system(command)    
    #fw.Close()
